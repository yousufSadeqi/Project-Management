{"version":3,"file":"getCanonicalHeaders.js","sources":["../../../../../../../../src/clients/middleware/signing/signer/signatureV4/utils/getCanonicalHeaders.ts"],"sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getCanonicalHeaders = void 0;\n/**\n * Returns canonical headers.\n *\n * @param headers Headers from the request.\n * @returns Request headers that will be signed, and their values, separated by newline characters. Header names must\n * use lowercase characters, must appear in alphabetical order, and must be followed by a colon (:). For the values,\n * trim any leading or trailing spaces, convert sequential spaces to a single space, and separate the values\n * for a multi-value header using commas.\n *\n * @internal\n */\nconst getCanonicalHeaders = (headers) => Object.entries(headers)\n    .map(([key, value]) => ({\n    key: key.toLowerCase(),\n    value: value?.trim().replace(/\\s+/g, ' ') ?? '',\n}))\n    .sort((a, b) => (a.key < b.key ? -1 : 1))\n    .map(entry => `${entry.key}:${entry.value}\\n`)\n    .join('');\nexports.getCanonicalHeaders = getCanonicalHeaders;\n"],"names":[],"mappings":";;AACA;AACA;AACA,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;AAC7D,OAAO,CAAC,mBAAmB,GAAG,MAAM;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,mBAAmB,GAAG,CAAC,OAAO,KAAK,MAAM,CAAC,OAAO,CAAC,OAAO;AAC/D,KAAK,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,MAAM;AAC5B,IAAI,GAAG,EAAE,GAAG,CAAC,WAAW,EAAE;AAC1B,IAAI,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,IAAI,EAAE;AACnD,CAAC,CAAC;AACF,KAAK,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,CAAC,CAAC;AAC5C,KAAK,GAAG,CAAC,KAAK,IAAI,CAAC,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC;AACjD,KAAK,IAAI,CAAC,EAAE,CAAC;AACb,OAAO,CAAC,mBAAmB,GAAG,mBAAmB;;"}