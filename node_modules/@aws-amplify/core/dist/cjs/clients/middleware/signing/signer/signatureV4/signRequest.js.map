{"version":3,"file":"signRequest.js","sources":["../../../../../../../src/clients/middleware/signing/signer/signatureV4/signRequest.ts"],"sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.signRequest = void 0;\nconst getSignedHeaders_1 = require(\"./utils/getSignedHeaders\");\nconst getSigningValues_1 = require(\"./utils/getSigningValues\");\nconst constants_1 = require(\"./constants\");\nconst getSignature_1 = require(\"./utils/getSignature\");\n/**\n * Given a `HttpRequest`, returns a Signature Version 4 signed `HttpRequest`.\n *\n * @param request `HttpRequest` to be signed.\n * @param signRequestOptions `SignRequestOptions` object containing values used to construct the signature.\n * @returns A `HttpRequest` with authentication headers which can grant temporary access to AWS resources.\n */\nconst signRequest = (request, options) => {\n    const signingValues = (0, getSigningValues_1.getSigningValues)(options);\n    const { accessKeyId, credentialScope, longDate, sessionToken } = signingValues;\n    // create the request to sign\n    const headers = { ...request.headers };\n    headers[constants_1.HOST_HEADER] = request.url.host;\n    headers[constants_1.AMZ_DATE_HEADER] = longDate;\n    if (sessionToken) {\n        headers[constants_1.TOKEN_HEADER] = sessionToken;\n    }\n    const requestToSign = { ...request, headers };\n    // calculate and add the signature to the request\n    const signature = (0, getSignature_1.getSignature)(requestToSign, signingValues);\n    const credentialEntry = `Credential=${accessKeyId}/${credentialScope}`;\n    const signedHeadersEntry = `SignedHeaders=${(0, getSignedHeaders_1.getSignedHeaders)(headers)}`;\n    const signatureEntry = `Signature=${signature}`;\n    headers[constants_1.AUTH_HEADER] =\n        `${constants_1.SHA256_ALGORITHM_IDENTIFIER} ${credentialEntry}, ${signedHeadersEntry}, ${signatureEntry}`;\n    return requestToSign;\n};\nexports.signRequest = signRequest;\n"],"names":[],"mappings":";;AACA;AACA;AACA,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;AAC7D,OAAO,CAAC,WAAW,GAAG,MAAM;AAC5B,MAAM,kBAAkB,GAAG,OAAO,CAAC,0BAA0B,CAAC;AAC9D,MAAM,kBAAkB,GAAG,OAAO,CAAC,0BAA0B,CAAC;AAC9D,MAAM,WAAW,GAAG,OAAO,CAAC,aAAa,CAAC;AAC1C,MAAM,cAAc,GAAG,OAAO,CAAC,sBAAsB,CAAC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,WAAW,GAAG,CAAC,OAAO,EAAE,OAAO,KAAK;AAC1C,IAAI,MAAM,aAAa,GAAG,IAAI,kBAAkB,CAAC,gBAAgB,EAAE,OAAO,CAAC;AAC3E,IAAI,MAAM,EAAE,WAAW,EAAE,eAAe,EAAE,QAAQ,EAAE,YAAY,EAAE,GAAG,aAAa;AAClF;AACA,IAAI,MAAM,OAAO,GAAG,EAAE,GAAG,OAAO,CAAC,OAAO,EAAE;AAC1C,IAAI,OAAO,CAAC,WAAW,CAAC,WAAW,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI;AACvD,IAAI,OAAO,CAAC,WAAW,CAAC,eAAe,CAAC,GAAG,QAAQ;AACnD,IAAI,IAAI,YAAY,EAAE;AACtB,QAAQ,OAAO,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,YAAY;AACxD;AACA,IAAI,MAAM,aAAa,GAAG,EAAE,GAAG,OAAO,EAAE,OAAO,EAAE;AACjD;AACA,IAAI,MAAM,SAAS,GAAG,IAAI,cAAc,CAAC,YAAY,EAAE,aAAa,EAAE,aAAa,CAAC;AACpF,IAAI,MAAM,eAAe,GAAG,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC;AAC1E,IAAI,MAAM,kBAAkB,GAAG,CAAC,cAAc,EAAE,IAAI,kBAAkB,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC,CAAC;AACnG,IAAI,MAAM,cAAc,GAAG,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;AACnD,IAAI,OAAO,CAAC,WAAW,CAAC,WAAW,CAAC;AACpC,QAAQ,CAAC,EAAE,WAAW,CAAC,2BAA2B,CAAC,CAAC,EAAE,eAAe,CAAC,EAAE,EAAE,kBAAkB,CAAC,EAAE,EAAE,cAAc,CAAC,CAAC;AACjH,IAAI,OAAO,aAAa;AACxB,CAAC;AACD,OAAO,CAAC,WAAW,GAAG,WAAW;;"}