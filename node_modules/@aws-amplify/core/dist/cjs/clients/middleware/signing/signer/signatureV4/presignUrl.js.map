{"version":3,"file":"presignUrl.js","sources":["../../../../../../../src/clients/middleware/signing/signer/signatureV4/presignUrl.ts"],"sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.presignUrl = void 0;\nconst amplifyUrl_1 = require(\"../../../../../utils/amplifyUrl\");\nconst constants_1 = require(\"./constants\");\nconst getSigningValues_1 = require(\"./utils/getSigningValues\");\nconst getSignature_1 = require(\"./utils/getSignature\");\n/**\n * Given a `Presignable` object, returns a Signature Version 4 presigned `URL` object.\n *\n * @param presignable `Presignable` object containing at least a url to be presigned with authentication query params.\n * @param presignUrlOptions `PresignUrlOptions` object containing values used to construct the signature.\n * @returns A `URL` with authentication query params which can grant temporary access to AWS resources.\n */\nconst presignUrl = ({ body, method = 'GET', url }, { expiration, ...options }) => {\n    const signingValues = (0, getSigningValues_1.getSigningValues)(options);\n    const { accessKeyId, credentialScope, longDate, sessionToken } = signingValues;\n    // create the request to sign\n    const presignedUrl = new amplifyUrl_1.AmplifyUrl(url);\n    Object.entries({\n        [constants_1.ALGORITHM_QUERY_PARAM]: constants_1.SHA256_ALGORITHM_IDENTIFIER,\n        [constants_1.CREDENTIAL_QUERY_PARAM]: `${accessKeyId}/${credentialScope}`,\n        [constants_1.AMZ_DATE_QUERY_PARAM]: longDate,\n        [constants_1.SIGNED_HEADERS_QUERY_PARAM]: constants_1.HOST_HEADER,\n        ...(expiration && { [constants_1.EXPIRES_QUERY_PARAM]: expiration.toString() }),\n        ...(sessionToken && { [constants_1.TOKEN_QUERY_PARAM]: sessionToken }),\n    }).forEach(([key, value]) => {\n        presignedUrl.searchParams.append(key, value);\n    });\n    const requestToSign = {\n        body,\n        headers: { [constants_1.HOST_HEADER]: url.host },\n        method,\n        url: presignedUrl,\n    };\n    // calculate and add the signature to the url\n    const signature = (0, getSignature_1.getSignature)(requestToSign, signingValues);\n    presignedUrl.searchParams.append(constants_1.SIGNATURE_QUERY_PARAM, signature);\n    return presignedUrl;\n};\nexports.presignUrl = presignUrl;\n"],"names":[],"mappings":";;AACA;AACA;AACA,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;AAC7D,OAAO,CAAC,UAAU,GAAG,MAAM;AAC3B,MAAM,YAAY,GAAG,OAAO,CAAC,iCAAiC,CAAC;AAC/D,MAAM,WAAW,GAAG,OAAO,CAAC,aAAa,CAAC;AAC1C,MAAM,kBAAkB,GAAG,OAAO,CAAC,0BAA0B,CAAC;AAC9D,MAAM,cAAc,GAAG,OAAO,CAAC,sBAAsB,CAAC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,UAAU,GAAG,CAAC,EAAE,IAAI,EAAE,MAAM,GAAG,KAAK,EAAE,GAAG,EAAE,EAAE,EAAE,UAAU,EAAE,GAAG,OAAO,EAAE,KAAK;AAClF,IAAI,MAAM,aAAa,GAAG,IAAI,kBAAkB,CAAC,gBAAgB,EAAE,OAAO,CAAC;AAC3E,IAAI,MAAM,EAAE,WAAW,EAAE,eAAe,EAAE,QAAQ,EAAE,YAAY,EAAE,GAAG,aAAa;AAClF;AACA,IAAI,MAAM,YAAY,GAAG,IAAI,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC;AACzD,IAAI,MAAM,CAAC,OAAO,CAAC;AACnB,QAAQ,CAAC,WAAW,CAAC,qBAAqB,GAAG,WAAW,CAAC,2BAA2B;AACpF,QAAQ,CAAC,WAAW,CAAC,sBAAsB,GAAG,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC;AACjF,QAAQ,CAAC,WAAW,CAAC,oBAAoB,GAAG,QAAQ;AACpD,QAAQ,CAAC,WAAW,CAAC,0BAA0B,GAAG,WAAW,CAAC,WAAW;AACzE,QAAQ,IAAI,UAAU,IAAI,EAAE,CAAC,WAAW,CAAC,mBAAmB,GAAG,UAAU,CAAC,QAAQ,EAAE,EAAE,CAAC;AACvF,QAAQ,IAAI,YAAY,IAAI,EAAE,CAAC,WAAW,CAAC,iBAAiB,GAAG,YAAY,EAAE,CAAC;AAC9E,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,KAAK;AACjC,QAAQ,YAAY,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC;AACpD,KAAK,CAAC;AACN,IAAI,MAAM,aAAa,GAAG;AAC1B,QAAQ,IAAI;AACZ,QAAQ,OAAO,EAAE,EAAE,CAAC,WAAW,CAAC,WAAW,GAAG,GAAG,CAAC,IAAI,EAAE;AACxD,QAAQ,MAAM;AACd,QAAQ,GAAG,EAAE,YAAY;AACzB,KAAK;AACL;AACA,IAAI,MAAM,SAAS,GAAG,IAAI,cAAc,CAAC,YAAY,EAAE,aAAa,EAAE,aAAa,CAAC;AACpF,IAAI,YAAY,CAAC,YAAY,CAAC,MAAM,CAAC,WAAW,CAAC,qBAAqB,EAAE,SAAS,CAAC;AAClF,IAAI,OAAO,YAAY;AACvB,CAAC;AACD,OAAO,CAAC,UAAU,GAAG,UAAU;;"}