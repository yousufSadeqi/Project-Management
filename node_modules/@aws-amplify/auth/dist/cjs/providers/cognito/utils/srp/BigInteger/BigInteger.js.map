{"version":3,"file":"BigInteger.js","sources":["../../../../../../../src/providers/cognito/utils/srp/BigInteger/BigInteger.ts"],"sourcesContent":["\"use strict\";\n/* eslint-disable */\n// @ts-nocheck -> BigInteger is already a vended utility\n// A small implementation of BigInteger based on http://www-cs-students.stanford.edu/~tjw/jsbn/\n//\n// All public methods have been removed except the following:\n//   new BigInteger(a, b) (only radix 2, 4, 8, 16 and 32 supported)\n//   toString (only radix 2, 4, 8, 16 and 32 supported)\n//   negate\n//   abs\n//   compareTo\n//   bitLength\n//   mod\n//   equals\n//   add\n//   subtract\n//   multiply\n//   divide\n//   modPow\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = BigInteger;\n/*\n * Copyright (c) 2003-2005  Tom Wu\n * All Rights Reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS-IS\" AND WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY\n * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n *\n * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,\n * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER\n * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF\n * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT\n * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n *\n * In addition, the following condition applies:\n *\n * All redistributions must retain an intact copy of this copyright notice\n * and disclaimer.\n */\n// (public) Constructor\nfunction BigInteger(a, b) {\n    if (a != null)\n        this.fromString(a, b);\n}\n// return new, unset BigInteger\nfunction nbi() {\n    return new BigInteger(null, null);\n}\n// Bits per digit\nlet dbits;\n// JavaScript engine analysis\nconst canary = 0xdeadbeefcafe;\nconst j_lm = (canary & 0xffffff) === 0xefcafe;\n// am: Compute w_j += (x*this_i), propagate carries,\n// c is initial carry, returns final carry.\n// c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n// We need to select the fastest one that works in this environment.\n// am1: use a single mult and divide to get the high bits,\n// max digit bits should be 26 because\n// max internal value = 2*dvalue^2-2*dvalue (< 2^53)\nfunction am1(i, x, w, j, c, n) {\n    while (--n >= 0) {\n        const v = x * this[i++] + w[j] + c;\n        c = Math.floor(v / 0x4000000);\n        w[j++] = v & 0x3ffffff;\n    }\n    return c;\n}\n// am2 avoids a big mult-and-extract completely.\n// Max digit bits should be <= 30 because we do bitwise ops\n// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\nfunction am2(i, x, w, j, c, n) {\n    const xl = x & 0x7fff;\n    const xh = x >> 15;\n    while (--n >= 0) {\n        let l = this[i] & 0x7fff;\n        const h = this[i++] >> 15;\n        const m = xh * l + h * xl;\n        l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);\n        c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);\n        w[j++] = l & 0x3fffffff;\n    }\n    return c;\n}\n// Alternately, set max digit bits to 28 since some\n// browsers slow down when dealing with 32-bit numbers.\nfunction am3(i, x, w, j, c, n) {\n    const xl = x & 0x3fff;\n    const xh = x >> 14;\n    while (--n >= 0) {\n        let l = this[i] & 0x3fff;\n        const h = this[i++] >> 14;\n        const m = xh * l + h * xl;\n        l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;\n        c = (l >> 28) + (m >> 14) + xh * h;\n        w[j++] = l & 0xfffffff;\n    }\n    return c;\n}\nconst inBrowser = typeof navigator !== 'undefined';\nif (inBrowser && j_lm && navigator.appName === 'Microsoft Internet Explorer') {\n    BigInteger.prototype.am = am2;\n    dbits = 30;\n}\nelse if (inBrowser && j_lm && navigator.appName !== 'Netscape') {\n    BigInteger.prototype.am = am1;\n    dbits = 26;\n}\nelse {\n    // Mozilla/Netscape seems to prefer am3\n    BigInteger.prototype.am = am3;\n    dbits = 28;\n}\nBigInteger.prototype.DB = dbits;\nBigInteger.prototype.DM = (1 << dbits) - 1;\nBigInteger.prototype.DV = 1 << dbits;\nconst BI_FP = 52;\nBigInteger.prototype.FV = Math.pow(2, BI_FP);\nBigInteger.prototype.F1 = BI_FP - dbits;\nBigInteger.prototype.F2 = 2 * dbits - BI_FP;\n// Digit conversions\nconst BI_RM = '0123456789abcdefghijklmnopqrstuvwxyz';\nconst BI_RC = [];\nlet rr, vv;\nrr = '0'.charCodeAt(0);\nfor (vv = 0; vv <= 9; ++vv)\n    BI_RC[rr++] = vv;\nrr = 'a'.charCodeAt(0);\nfor (vv = 10; vv < 36; ++vv)\n    BI_RC[rr++] = vv;\nrr = 'A'.charCodeAt(0);\nfor (vv = 10; vv < 36; ++vv)\n    BI_RC[rr++] = vv;\nfunction int2char(n) {\n    return BI_RM.charAt(n);\n}\nfunction intAt(s, i) {\n    const c = BI_RC[s.charCodeAt(i)];\n    return c == null ? -1 : c;\n}\n// (protected) copy this to r\nfunction bnpCopyTo(r) {\n    for (let i = this.t - 1; i >= 0; --i)\n        r[i] = this[i];\n    r.t = this.t;\n    r.s = this.s;\n}\n// (protected) set from integer value x, -DV <= x < DV\nfunction bnpFromInt(x) {\n    this.t = 1;\n    this.s = x < 0 ? -1 : 0;\n    if (x > 0)\n        this[0] = x;\n    else if (x < -1)\n        this[0] = x + this.DV;\n    else\n        this.t = 0;\n}\n// return bigint initialized to value\nfunction nbv(i) {\n    const r = nbi();\n    r.fromInt(i);\n    return r;\n}\n// (protected) set from string and radix\nfunction bnpFromString(s, b) {\n    let k;\n    if (b === 16)\n        k = 4;\n    else if (b === 8)\n        k = 3;\n    else if (b === 2)\n        k = 1;\n    else if (b === 32)\n        k = 5;\n    else if (b === 4)\n        k = 2;\n    else\n        throw new Error('Only radix 2, 4, 8, 16, 32 are supported');\n    this.t = 0;\n    this.s = 0;\n    let i = s.length;\n    let mi = false;\n    let sh = 0;\n    while (--i >= 0) {\n        const x = intAt(s, i);\n        if (x < 0) {\n            if (s.charAt(i) === '-')\n                mi = true;\n            continue;\n        }\n        mi = false;\n        if (sh === 0)\n            this[this.t++] = x;\n        else if (sh + k > this.DB) {\n            this[this.t - 1] |= (x & ((1 << (this.DB - sh)) - 1)) << sh;\n            this[this.t++] = x >> (this.DB - sh);\n        }\n        else\n            this[this.t - 1] |= x << sh;\n        sh += k;\n        if (sh >= this.DB)\n            sh -= this.DB;\n    }\n    this.clamp();\n    if (mi)\n        BigInteger.ZERO.subTo(this, this);\n}\n// (protected) clamp off excess high words\nfunction bnpClamp() {\n    const c = this.s & this.DM;\n    while (this.t > 0 && this[this.t - 1] == c)\n        --this.t;\n}\n// (public) return string representation in given radix\nfunction bnToString(b) {\n    if (this.s < 0)\n        return '-' + this.negate().toString(b);\n    let k;\n    if (b == 16)\n        k = 4;\n    else if (b === 8)\n        k = 3;\n    else if (b === 2)\n        k = 1;\n    else if (b === 32)\n        k = 5;\n    else if (b === 4)\n        k = 2;\n    else\n        throw new Error('Only radix 2, 4, 8, 16, 32 are supported');\n    const km = (1 << k) - 1;\n    let d;\n    let m = false;\n    let r = '';\n    let i = this.t;\n    let p = this.DB - ((i * this.DB) % k);\n    if (i-- > 0) {\n        if (p < this.DB && (d = this[i] >> p) > 0) {\n            m = true;\n            r = int2char(d);\n        }\n        while (i >= 0) {\n            if (p < k) {\n                d = (this[i] & ((1 << p) - 1)) << (k - p);\n                d |= this[--i] >> (p += this.DB - k);\n            }\n            else {\n                d = (this[i] >> (p -= k)) & km;\n                if (p <= 0) {\n                    p += this.DB;\n                    --i;\n                }\n            }\n            if (d > 0)\n                m = true;\n            if (m)\n                r += int2char(d);\n        }\n    }\n    return m ? r : '0';\n}\n// (public) -this\nfunction bnNegate() {\n    const r = nbi();\n    BigInteger.ZERO.subTo(this, r);\n    return r;\n}\n// (public) |this|\nfunction bnAbs() {\n    return this.s < 0 ? this.negate() : this;\n}\n// (public) return + if this > a, - if this < a, 0 if equal\nfunction bnCompareTo(a) {\n    let r = this.s - a.s;\n    if (r != 0)\n        return r;\n    let i = this.t;\n    r = i - a.t;\n    if (r != 0)\n        return this.s < 0 ? -r : r;\n    while (--i >= 0)\n        if ((r = this[i] - a[i]) != 0)\n            return r;\n    return 0;\n}\n// returns bit length of the integer x\nfunction nbits(x) {\n    let r = 1;\n    let t;\n    if ((t = x >>> 16) !== 0) {\n        x = t;\n        r += 16;\n    }\n    if ((t = x >> 8) !== 0) {\n        x = t;\n        r += 8;\n    }\n    if ((t = x >> 4) !== 0) {\n        x = t;\n        r += 4;\n    }\n    if ((t = x >> 2) !== 0) {\n        x = t;\n        r += 2;\n    }\n    if ((t = x >> 1) !== 0) {\n        x = t;\n        r += 1;\n    }\n    return r;\n}\n// (public) return the number of bits in \"this\"\nfunction bnBitLength() {\n    if (this.t <= 0)\n        return 0;\n    return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ (this.s & this.DM));\n}\n// (protected) r = this << n*DB\nfunction bnpDLShiftTo(n, r) {\n    let i;\n    for (i = this.t - 1; i >= 0; --i)\n        r[i + n] = this[i];\n    for (i = n - 1; i >= 0; --i)\n        r[i] = 0;\n    r.t = this.t + n;\n    r.s = this.s;\n}\n// (protected) r = this >> n*DB\nfunction bnpDRShiftTo(n, r) {\n    for (let i = n; i < this.t; ++i)\n        r[i - n] = this[i];\n    r.t = Math.max(this.t - n, 0);\n    r.s = this.s;\n}\n// (protected) r = this << n\nfunction bnpLShiftTo(n, r) {\n    const bs = n % this.DB;\n    const cbs = this.DB - bs;\n    const bm = (1 << cbs) - 1;\n    const ds = Math.floor(n / this.DB);\n    let c = (this.s << bs) & this.DM;\n    let i;\n    for (i = this.t - 1; i >= 0; --i) {\n        r[i + ds + 1] = (this[i] >> cbs) | c;\n        c = (this[i] & bm) << bs;\n    }\n    for (i = ds - 1; i >= 0; --i)\n        r[i] = 0;\n    r[ds] = c;\n    r.t = this.t + ds + 1;\n    r.s = this.s;\n    r.clamp();\n}\n// (protected) r = this >> n\nfunction bnpRShiftTo(n, r) {\n    r.s = this.s;\n    const ds = Math.floor(n / this.DB);\n    if (ds >= this.t) {\n        r.t = 0;\n        return;\n    }\n    const bs = n % this.DB;\n    const cbs = this.DB - bs;\n    const bm = (1 << bs) - 1;\n    r[0] = this[ds] >> bs;\n    for (let i = ds + 1; i < this.t; ++i) {\n        r[i - ds - 1] |= (this[i] & bm) << cbs;\n        r[i - ds] = this[i] >> bs;\n    }\n    if (bs > 0)\n        r[this.t - ds - 1] |= (this.s & bm) << cbs;\n    r.t = this.t - ds;\n    r.clamp();\n}\n// (protected) r = this - a\nfunction bnpSubTo(a, r) {\n    let i = 0;\n    let c = 0;\n    const m = Math.min(a.t, this.t);\n    while (i < m) {\n        c += this[i] - a[i];\n        r[i++] = c & this.DM;\n        c >>= this.DB;\n    }\n    if (a.t < this.t) {\n        c -= a.s;\n        while (i < this.t) {\n            c += this[i];\n            r[i++] = c & this.DM;\n            c >>= this.DB;\n        }\n        c += this.s;\n    }\n    else {\n        c += this.s;\n        while (i < a.t) {\n            c -= a[i];\n            r[i++] = c & this.DM;\n            c >>= this.DB;\n        }\n        c -= a.s;\n    }\n    r.s = c < 0 ? -1 : 0;\n    if (c < -1)\n        r[i++] = this.DV + c;\n    else if (c > 0)\n        r[i++] = c;\n    r.t = i;\n    r.clamp();\n}\n// (protected) r = this * a, r != this,a (HAC 14.12)\n// \"this\" should be the larger one if appropriate.\nfunction bnpMultiplyTo(a, r) {\n    const x = this.abs();\n    const y = a.abs();\n    let i = x.t;\n    r.t = i + y.t;\n    while (--i >= 0)\n        r[i] = 0;\n    for (i = 0; i < y.t; ++i)\n        r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);\n    r.s = 0;\n    r.clamp();\n    if (this.s !== a.s)\n        BigInteger.ZERO.subTo(r, r);\n}\n// (protected) r = this^2, r != this (HAC 14.16)\nfunction bnpSquareTo(r) {\n    const x = this.abs();\n    let i = (r.t = 2 * x.t);\n    while (--i >= 0)\n        r[i] = 0;\n    for (i = 0; i < x.t - 1; ++i) {\n        const c = x.am(i, x[i], r, 2 * i, 0, 1);\n        if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >=\n            x.DV) {\n            r[i + x.t] -= x.DV;\n            r[i + x.t + 1] = 1;\n        }\n    }\n    if (r.t > 0)\n        r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);\n    r.s = 0;\n    r.clamp();\n}\n// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n// r != q, this != m.  q or r may be null.\nfunction bnpDivRemTo(m, q, r) {\n    const pm = m.abs();\n    if (pm.t <= 0)\n        return;\n    const pt = this.abs();\n    if (pt.t < pm.t) {\n        if (q != null)\n            q.fromInt(0);\n        if (r != null)\n            this.copyTo(r);\n        return;\n    }\n    if (r === null)\n        r = nbi();\n    const y = nbi();\n    const ts = this.s;\n    const ms = m.s;\n    const nsh = this.DB - nbits(pm[pm.t - 1]);\n    // normalize modulus\n    if (nsh > 0) {\n        pm.lShiftTo(nsh, y);\n        pt.lShiftTo(nsh, r);\n    }\n    else {\n        pm.copyTo(y);\n        pt.copyTo(r);\n    }\n    const ys = y.t;\n    const y0 = y[ys - 1];\n    if (y0 === 0)\n        return;\n    const yt = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0);\n    const d1 = this.FV / yt;\n    const d2 = (1 << this.F1) / yt;\n    const e = 1 << this.F2;\n    let i = r.t;\n    let j = i - ys;\n    const t = q === null ? nbi() : q;\n    y.dlShiftTo(j, t);\n    if (r.compareTo(t) >= 0) {\n        r[r.t++] = 1;\n        r.subTo(t, r);\n    }\n    BigInteger.ONE.dlShiftTo(ys, t);\n    t.subTo(y, y);\n    // \"negative\" y so we can replace sub with am later\n    while (y.t < ys)\n        y[y.t++] = 0;\n    while (--j >= 0) {\n        // Estimate quotient digit\n        let qd = r[--i] === y0 ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);\n        if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {\n            // Try it out\n            y.dlShiftTo(j, t);\n            r.subTo(t, r);\n            while (r[i] < --qd)\n                r.subTo(t, r);\n        }\n    }\n    if (q !== null) {\n        r.drShiftTo(ys, q);\n        if (ts !== ms)\n            BigInteger.ZERO.subTo(q, q);\n    }\n    r.t = ys;\n    r.clamp();\n    if (nsh > 0)\n        r.rShiftTo(nsh, r);\n    // Denormalize remainder\n    if (ts < 0)\n        BigInteger.ZERO.subTo(r, r);\n}\n// (public) this mod a\nfunction bnMod(a) {\n    const r = nbi();\n    this.abs().divRemTo(a, null, r);\n    if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0)\n        a.subTo(r, r);\n    return r;\n}\n// (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n// justification:\n//         xy == 1 (mod m)\n//         xy =  1+km\n//   xy(2-xy) = (1+km)(1-km)\n// x[y(2-xy)] = 1-k^2m^2\n// x[y(2-xy)] == 1 (mod m^2)\n// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n// JS multiply \"overflows\" differently from C/C++, so care is needed here.\nfunction bnpInvDigit() {\n    if (this.t < 1)\n        return 0;\n    const x = this[0];\n    if ((x & 1) === 0)\n        return 0;\n    let y = x & 3;\n    // y == 1/x mod 2^2\n    y = (y * (2 - (x & 0xf) * y)) & 0xf;\n    // y == 1/x mod 2^4\n    y = (y * (2 - (x & 0xff) * y)) & 0xff;\n    // y == 1/x mod 2^8\n    y = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff;\n    // y == 1/x mod 2^16\n    // last step - calculate inverse mod DV directly;\n    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n    y = (y * (2 - ((x * y) % this.DV))) % this.DV;\n    // y == 1/x mod 2^dbits\n    // we really want the negative inverse, and -DV < y < DV\n    return y > 0 ? this.DV - y : -y;\n}\nfunction bnEquals(a) {\n    return this.compareTo(a) === 0;\n}\n// (protected) r = this + a\nfunction bnpAddTo(a, r) {\n    let i = 0;\n    let c = 0;\n    const m = Math.min(a.t, this.t);\n    while (i < m) {\n        c += this[i] + a[i];\n        r[i++] = c & this.DM;\n        c >>= this.DB;\n    }\n    if (a.t < this.t) {\n        c += a.s;\n        while (i < this.t) {\n            c += this[i];\n            r[i++] = c & this.DM;\n            c >>= this.DB;\n        }\n        c += this.s;\n    }\n    else {\n        c += this.s;\n        while (i < a.t) {\n            c += a[i];\n            r[i++] = c & this.DM;\n            c >>= this.DB;\n        }\n        c += a.s;\n    }\n    r.s = c < 0 ? -1 : 0;\n    if (c > 0)\n        r[i++] = c;\n    else if (c < -1)\n        r[i++] = this.DV + c;\n    r.t = i;\n    r.clamp();\n}\n// (public) this + a\nfunction bnAdd(a) {\n    const r = nbi();\n    this.addTo(a, r);\n    return r;\n}\n// (public) this - a\nfunction bnSubtract(a) {\n    const r = nbi();\n    this.subTo(a, r);\n    return r;\n}\n// (public) this * a\nfunction bnMultiply(a) {\n    const r = nbi();\n    this.multiplyTo(a, r);\n    return r;\n}\n// (public) this / a\nfunction bnDivide(a) {\n    const r = nbi();\n    this.divRemTo(a, r, null);\n    return r;\n}\n// Montgomery reduction\nfunction Montgomery(m) {\n    this.m = m;\n    this.mp = m.invDigit();\n    this.mpl = this.mp & 0x7fff;\n    this.mph = this.mp >> 15;\n    this.um = (1 << (m.DB - 15)) - 1;\n    this.mt2 = 2 * m.t;\n}\n// xR mod m\nfunction montConvert(x) {\n    const r = nbi();\n    x.abs().dlShiftTo(this.m.t, r);\n    r.divRemTo(this.m, null, r);\n    if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0)\n        this.m.subTo(r, r);\n    return r;\n}\n// x/R mod m\nfunction montRevert(x) {\n    const r = nbi();\n    x.copyTo(r);\n    this.reduce(r);\n    return r;\n}\n// x = x/R mod m (HAC 14.32)\nfunction montReduce(x) {\n    while (x.t <= this.mt2)\n        // pad x so am has enough room later\n        x[x.t++] = 0;\n    for (let i = 0; i < this.m.t; ++i) {\n        // faster way of calculating u0 = x[i]*mp mod DV\n        let j = x[i] & 0x7fff;\n        const u0 = (j * this.mpl +\n            (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) << 15)) &\n            x.DM;\n        // use am to combine the multiply-shift-add into one call\n        j = i + this.m.t;\n        x[j] += this.m.am(0, u0, x, i, 0, this.m.t);\n        // propagate carry\n        while (x[j] >= x.DV) {\n            x[j] -= x.DV;\n            x[++j]++;\n        }\n    }\n    x.clamp();\n    x.drShiftTo(this.m.t, x);\n    if (x.compareTo(this.m) >= 0)\n        x.subTo(this.m, x);\n}\n// r = \"x^2/R mod m\"; x != r\nfunction montSqrTo(x, r) {\n    x.squareTo(r);\n    this.reduce(r);\n}\n// r = \"xy/R mod m\"; x,y != r\nfunction montMulTo(x, y, r) {\n    x.multiplyTo(y, r);\n    this.reduce(r);\n}\nMontgomery.prototype.convert = montConvert;\nMontgomery.prototype.revert = montRevert;\nMontgomery.prototype.reduce = montReduce;\nMontgomery.prototype.mulTo = montMulTo;\nMontgomery.prototype.sqrTo = montSqrTo;\n// (public) this^e % m (HAC 14.85)\nfunction bnModPow(e, m, callback) {\n    let i = e.bitLength();\n    let k;\n    let r = nbv(1);\n    const z = new Montgomery(m);\n    if (i <= 0)\n        return r;\n    else if (i < 18)\n        k = 1;\n    else if (i < 48)\n        k = 3;\n    else if (i < 144)\n        k = 4;\n    else if (i < 768)\n        k = 5;\n    else\n        k = 6;\n    // precomputation\n    const g = [];\n    let n = 3;\n    const k1 = k - 1;\n    const km = (1 << k) - 1;\n    g[1] = z.convert(this);\n    if (k > 1) {\n        const g2 = nbi();\n        z.sqrTo(g[1], g2);\n        while (n <= km) {\n            g[n] = nbi();\n            z.mulTo(g2, g[n - 2], g[n]);\n            n += 2;\n        }\n    }\n    let j = e.t - 1;\n    let w;\n    let is1 = true;\n    let r2 = nbi();\n    let t;\n    i = nbits(e[j]) - 1;\n    while (j >= 0) {\n        if (i >= k1)\n            w = (e[j] >> (i - k1)) & km;\n        else {\n            w = (e[j] & ((1 << (i + 1)) - 1)) << (k1 - i);\n            if (j > 0)\n                w |= e[j - 1] >> (this.DB + i - k1);\n        }\n        n = k;\n        while ((w & 1) === 0) {\n            w >>= 1;\n            --n;\n        }\n        if ((i -= n) < 0) {\n            i += this.DB;\n            --j;\n        }\n        if (is1) {\n            // ret == 1, don't bother squaring or multiplying it\n            g[w].copyTo(r);\n            is1 = false;\n        }\n        else {\n            while (n > 1) {\n                z.sqrTo(r, r2);\n                z.sqrTo(r2, r);\n                n -= 2;\n            }\n            if (n > 0)\n                z.sqrTo(r, r2);\n            else {\n                t = r;\n                r = r2;\n                r2 = t;\n            }\n            z.mulTo(r2, g[w], r);\n        }\n        while (j >= 0 && (e[j] & (1 << i)) === 0) {\n            z.sqrTo(r, r2);\n            t = r;\n            r = r2;\n            r2 = t;\n            if (--i < 0) {\n                i = this.DB - 1;\n                --j;\n            }\n        }\n    }\n    const result = z.revert(r);\n    callback(null, result);\n    return result;\n}\n// protected\nBigInteger.prototype.copyTo = bnpCopyTo;\nBigInteger.prototype.fromInt = bnpFromInt;\nBigInteger.prototype.fromString = bnpFromString;\nBigInteger.prototype.clamp = bnpClamp;\nBigInteger.prototype.dlShiftTo = bnpDLShiftTo;\nBigInteger.prototype.drShiftTo = bnpDRShiftTo;\nBigInteger.prototype.lShiftTo = bnpLShiftTo;\nBigInteger.prototype.rShiftTo = bnpRShiftTo;\nBigInteger.prototype.subTo = bnpSubTo;\nBigInteger.prototype.multiplyTo = bnpMultiplyTo;\nBigInteger.prototype.squareTo = bnpSquareTo;\nBigInteger.prototype.divRemTo = bnpDivRemTo;\nBigInteger.prototype.invDigit = bnpInvDigit;\nBigInteger.prototype.addTo = bnpAddTo;\n// public\nBigInteger.prototype.toString = bnToString;\nBigInteger.prototype.negate = bnNegate;\nBigInteger.prototype.abs = bnAbs;\nBigInteger.prototype.compareTo = bnCompareTo;\nBigInteger.prototype.bitLength = bnBitLength;\nBigInteger.prototype.mod = bnMod;\nBigInteger.prototype.equals = bnEquals;\nBigInteger.prototype.add = bnAdd;\nBigInteger.prototype.subtract = bnSubtract;\nBigInteger.prototype.multiply = bnMultiply;\nBigInteger.prototype.divide = bnDivide;\nBigInteger.prototype.modPow = bnModPow;\n// \"constants\"\nBigInteger.ZERO = nbv(0);\nBigInteger.ONE = nbv(1);\n"],"names":[],"mappings":"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"}