{"version":3,"file":"registerPasskey.mjs","sources":["../../../../../src/client/utils/passkey/registerPasskey.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { assertCredentialIsPkcWithAuthenticatorAttestationResponse, } from './types';\nimport { deserializeJsonToPkcCreationOptions, serializePkcWithAttestationToJson, } from './serde';\nimport { PasskeyErrorCode, assertPasskeyError, handlePasskeyRegistrationError, } from './errors';\nimport { getIsPasskeySupported } from './getIsPasskeySupported';\n/**\n * Registers a new passkey for user\n * @param input - PasskeyCreateOptionsJson\n * @returns serialized PasskeyCreateResult\n */\nexport const registerPasskey = async (input) => {\n    try {\n        const isPasskeySupported = getIsPasskeySupported();\n        assertPasskeyError(isPasskeySupported, PasskeyErrorCode.PasskeyNotSupported);\n        const passkeyCreationOptions = deserializeJsonToPkcCreationOptions(input);\n        const credential = await navigator.credentials.create({\n            publicKey: passkeyCreationOptions,\n        });\n        assertCredentialIsPkcWithAuthenticatorAttestationResponse(credential);\n        return serializePkcWithAttestationToJson(credential);\n    }\n    catch (err) {\n        throw handlePasskeyRegistrationError(err);\n    }\n};\n"],"names":[],"mappings":";;;;;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACY,MAAC,eAAe,GAAG,OAAO,KAAK,KAAK;AAChD,IAAI,IAAI;AACR,QAAQ,MAAM,kBAAkB,GAAG,qBAAqB,EAAE;AAC1D,QAAQ,kBAAkB,CAAC,kBAAkB,EAAE,gBAAgB,CAAC,mBAAmB,CAAC;AACpF,QAAQ,MAAM,sBAAsB,GAAG,mCAAmC,CAAC,KAAK,CAAC;AACjF,QAAQ,MAAM,UAAU,GAAG,MAAM,SAAS,CAAC,WAAW,CAAC,MAAM,CAAC;AAC9D,YAAY,SAAS,EAAE,sBAAsB;AAC7C,SAAS,CAAC;AACV,QAAQ,yDAAyD,CAAC,UAAU,CAAC;AAC7E,QAAQ,OAAO,iCAAiC,CAAC,UAAU,CAAC;AAC5D;AACA,IAAI,OAAO,GAAG,EAAE;AAChB,QAAQ,MAAM,8BAA8B,CAAC,GAAG,CAAC;AACjD;AACA;;;;"}