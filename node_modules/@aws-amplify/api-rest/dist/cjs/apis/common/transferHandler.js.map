{"version":3,"file":"transferHandler.js","sources":["../../../../src/apis/common/transferHandler.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.transferHandler = void 0;\nconst aws_client_utils_1 = require(\"@aws-amplify/core/internals/aws-client-utils\");\nconst utils_1 = require(\"../../utils\");\nconst resolveHeaders_1 = require(\"../../utils/resolveHeaders\");\nconst authenticatedHandler_1 = require(\"./baseHandlers/authenticatedHandler\");\nconst unauthenticatedHandler_1 = require(\"./baseHandlers/unauthenticatedHandler\");\n/**\n * Make REST API call with best-effort IAM auth.\n * @param amplify Amplify instance to to resolve credentials and tokens. Should use different instance in client-side\n *   and SSR\n * @param options Options accepted from public API options when calling the handlers.\n * @param signingServiceInfo Internal-only options enable IAM auth as well as to to overwrite the IAM signing service\n *   and region. If specified, and NONE of API Key header or Auth header is present, IAM auth will be used.\n * @param iamAuthApplicable Callback function that is used to determine if IAM Auth should be used or not.\n *\n * @internal\n */\nconst transferHandler = async (amplify, options, iamAuthApplicable, signingServiceInfo) => {\n    const { url, method, headers, body, withCredentials, abortSignal, retryStrategy, } = options;\n    const resolvedBody = body\n        ? body instanceof FormData\n            ? body\n            : JSON.stringify(body ?? '')\n        : undefined;\n    const resolvedHeaders = (0, resolveHeaders_1.resolveHeaders)(headers, body);\n    const request = {\n        url,\n        headers: resolvedHeaders,\n        method,\n        body: resolvedBody,\n    };\n    const baseOptions = {\n        retryDecider: getRetryDeciderFromStrategy(retryStrategy ?? amplify?.libraryOptions?.API?.REST?.retryStrategy),\n        computeDelay: aws_client_utils_1.jitteredBackoff,\n        withCrossDomainCredentials: withCredentials,\n        abortSignal,\n    };\n    const isIamAuthApplicable = iamAuthApplicable(request, signingServiceInfo);\n    let response;\n    const credentials = await resolveCredentials(amplify);\n    if (isIamAuthApplicable && credentials) {\n        const signingInfoFromUrl = (0, utils_1.parseSigningInfo)(url);\n        const signingService = signingServiceInfo?.service ?? signingInfoFromUrl.service;\n        const signingRegion = signingServiceInfo?.region ?? signingInfoFromUrl.region;\n        response = await (0, authenticatedHandler_1.authenticatedHandler)(request, {\n            ...baseOptions,\n            credentials,\n            region: signingRegion,\n            service: signingService,\n        });\n    }\n    else {\n        response = await (0, unauthenticatedHandler_1.unauthenticatedHandler)(request, {\n            ...baseOptions,\n        });\n    }\n    // Clean-up un-modeled properties from response.\n    return {\n        statusCode: response.statusCode,\n        headers: response.headers,\n        body: response.body,\n    };\n};\nexports.transferHandler = transferHandler;\nconst getRetryDeciderFromStrategy = (retryStrategy) => {\n    const strategy = retryStrategy?.strategy;\n    if (strategy === 'no-retry') {\n        return () => Promise.resolve({ retryable: false });\n    }\n    return (0, aws_client_utils_1.getRetryDecider)(utils_1.parseRestApiServiceError);\n};\nconst resolveCredentials = async (amplify) => {\n    try {\n        const { credentials } = await amplify.Auth.fetchAuthSession();\n        if (credentials) {\n            return credentials;\n        }\n    }\n    catch (e) {\n        utils_1.logger.debug('No credentials available, the request will be unsigned.');\n    }\n    return null;\n};\n"],"names":[],"mappings":"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"}