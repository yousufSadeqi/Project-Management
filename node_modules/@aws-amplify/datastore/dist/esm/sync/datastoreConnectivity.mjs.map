{"version":3,"file":"datastoreConnectivity.mjs","sources":["../../../src/sync/datastoreConnectivity.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Observable } from 'rxjs';\nimport { ReachabilityMonitor } from './datastoreReachability';\nconst RECONNECTING_IN = 5000; // 5s this may be configurable in the future\nexport default class DataStoreConnectivity {\n    constructor() {\n        this.connectionStatus = {\n            online: false,\n        };\n    }\n    status() {\n        if (this.observer) {\n            throw new Error('Subscriber already exists');\n        }\n        return new Observable(observer => {\n            this.observer = observer;\n            // Will be used to forward socket connection changes, enhancing Reachability\n            this.subscription = ReachabilityMonitor.subscribe(({ online }) => {\n                this.connectionStatus.online = online;\n                const observerResult = { ...this.connectionStatus }; // copyOf status\n                observer.next(observerResult);\n            });\n            return () => {\n                clearTimeout(this.timeout);\n                this.unsubscribe();\n            };\n        });\n    }\n    unsubscribe() {\n        if (this.subscription) {\n            clearTimeout(this.timeout);\n            this.subscription.unsubscribe();\n        }\n    }\n    // for consistency with other background processors.\n    async stop() {\n        this.unsubscribe();\n    }\n    socketDisconnected() {\n        if (this.observer && typeof this.observer.next === 'function') {\n            this.observer.next({ online: false }); // Notify network issue from the socket\n            this.timeout = setTimeout(() => {\n                const observerResult = { ...this.connectionStatus }; // copyOf status\n                this.observer.next(observerResult);\n            }, RECONNECTING_IN); // giving time for socket cleanup and network status stabilization\n        }\n    }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AAGA,MAAM,eAAe,GAAG,IAAI,CAAC;AACd,MAAM,qBAAqB,CAAC;AAC3C,IAAI,WAAW,GAAG;AAClB,QAAQ,IAAI,CAAC,gBAAgB,GAAG;AAChC,YAAY,MAAM,EAAE,KAAK;AACzB,SAAS;AACT;AACA,IAAI,MAAM,GAAG;AACb,QAAQ,IAAI,IAAI,CAAC,QAAQ,EAAE;AAC3B,YAAY,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC;AACxD;AACA,QAAQ,OAAO,IAAI,UAAU,CAAC,QAAQ,IAAI;AAC1C,YAAY,IAAI,CAAC,QAAQ,GAAG,QAAQ;AACpC;AACA,YAAY,IAAI,CAAC,YAAY,GAAG,mBAAmB,CAAC,SAAS,CAAC,CAAC,EAAE,MAAM,EAAE,KAAK;AAC9E,gBAAgB,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,MAAM;AACrD,gBAAgB,MAAM,cAAc,GAAG,EAAE,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;AACpE,gBAAgB,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC;AAC7C,aAAa,CAAC;AACd,YAAY,OAAO,MAAM;AACzB,gBAAgB,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC;AAC1C,gBAAgB,IAAI,CAAC,WAAW,EAAE;AAClC,aAAa;AACb,SAAS,CAAC;AACV;AACA,IAAI,WAAW,GAAG;AAClB,QAAQ,IAAI,IAAI,CAAC,YAAY,EAAE;AAC/B,YAAY,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC;AACtC,YAAY,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE;AAC3C;AACA;AACA;AACA,IAAI,MAAM,IAAI,GAAG;AACjB,QAAQ,IAAI,CAAC,WAAW,EAAE;AAC1B;AACA,IAAI,kBAAkB,GAAG;AACzB,QAAQ,IAAI,IAAI,CAAC,QAAQ,IAAI,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,KAAK,UAAU,EAAE;AACvE,YAAY,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;AAClD,YAAY,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC,MAAM;AAC5C,gBAAgB,MAAM,cAAc,GAAG,EAAE,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;AACpE,gBAAgB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC;AAClD,aAAa,EAAE,eAAe,CAAC,CAAC;AAChC;AACA;AACA;;;;"}