{"version":3,"file":"utils.js","sources":["../../../../src/internals/events/utils.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.serializeEvents = exports.configure = exports.normalizeAuth = void 0;\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst core_1 = require(\"@aws-amplify/core\");\nconst normalizeAuth = (explicitAuthMode, defaultAuthMode) => {\n    if (!explicitAuthMode) {\n        return defaultAuthMode;\n    }\n    if (explicitAuthMode === 'identityPool') {\n        return 'iam';\n    }\n    return explicitAuthMode;\n};\nexports.normalizeAuth = normalizeAuth;\nconst configure = () => {\n    const config = core_1.Amplify.getConfig();\n    const eventsConfig = config.API?.Events;\n    if (!eventsConfig) {\n        throw new Error('Amplify configuration is missing. Have you called Amplify.configure()?');\n    }\n    const configAuthMode = (0, exports.normalizeAuth)(eventsConfig.defaultAuthMode, 'apiKey');\n    const options = {\n        appSyncGraphqlEndpoint: eventsConfig.endpoint,\n        region: eventsConfig.region,\n        authenticationType: configAuthMode,\n        apiKey: eventsConfig.apiKey,\n    };\n    return options;\n};\nexports.configure = configure;\n/**\n * Event API expects an array of JSON strings\n *\n * @param events - JSON-serializable value or an array of values\n * @returns array of JSON strings\n */\nconst serializeEvents = (events) => {\n    if (Array.isArray(events)) {\n        return events.map((ev, idx) => {\n            const eventJson = JSON.stringify(ev);\n            if (eventJson === undefined) {\n                throw new Error(`Event must be a valid JSON value. Received ${ev} at index ${idx}`);\n            }\n            return eventJson;\n        });\n    }\n    const eventJson = JSON.stringify(events);\n    if (eventJson === undefined) {\n        throw new Error(`Event must be a valid JSON value. Received ${events}`);\n    }\n    return [eventJson];\n};\nexports.serializeEvents = serializeEvents;\n"],"names":[],"mappings":";;AACA,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;AAC7D,OAAO,CAAC,eAAe,GAAG,OAAO,CAAC,SAAS,GAAG,OAAO,CAAC,aAAa,GAAG,MAAM;AAC5E;AACA;AACA,MAAM,MAAM,GAAG,OAAO,CAAC,mBAAmB,CAAC;AAC3C,MAAM,aAAa,GAAG,CAAC,gBAAgB,EAAE,eAAe,KAAK;AAC7D,IAAI,IAAI,CAAC,gBAAgB,EAAE;AAC3B,QAAQ,OAAO,eAAe;AAC9B;AACA,IAAI,IAAI,gBAAgB,KAAK,cAAc,EAAE;AAC7C,QAAQ,OAAO,KAAK;AACpB;AACA,IAAI,OAAO,gBAAgB;AAC3B,CAAC;AACD,OAAO,CAAC,aAAa,GAAG,aAAa;AACrC,MAAM,SAAS,GAAG,MAAM;AACxB,IAAI,MAAM,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,SAAS,EAAE;AAC7C,IAAI,MAAM,YAAY,GAAG,MAAM,CAAC,GAAG,EAAE,MAAM;AAC3C,IAAI,IAAI,CAAC,YAAY,EAAE;AACvB,QAAQ,MAAM,IAAI,KAAK,CAAC,wEAAwE,CAAC;AACjG;AACA,IAAI,MAAM,cAAc,GAAG,IAAI,OAAO,CAAC,aAAa,EAAE,YAAY,CAAC,eAAe,EAAE,QAAQ,CAAC;AAC7F,IAAI,MAAM,OAAO,GAAG;AACpB,QAAQ,sBAAsB,EAAE,YAAY,CAAC,QAAQ;AACrD,QAAQ,MAAM,EAAE,YAAY,CAAC,MAAM;AACnC,QAAQ,kBAAkB,EAAE,cAAc;AAC1C,QAAQ,MAAM,EAAE,YAAY,CAAC,MAAM;AACnC,KAAK;AACL,IAAI,OAAO,OAAO;AAClB,CAAC;AACD,OAAO,CAAC,SAAS,GAAG,SAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,eAAe,GAAG,CAAC,MAAM,KAAK;AACpC,IAAI,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;AAC/B,QAAQ,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,GAAG,KAAK;AACvC,YAAY,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;AAChD,YAAY,IAAI,SAAS,KAAK,SAAS,EAAE;AACzC,gBAAgB,MAAM,IAAI,KAAK,CAAC,CAAC,2CAA2C,EAAE,EAAE,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC,CAAC;AACnG;AACA,YAAY,OAAO,SAAS;AAC5B,SAAS,CAAC;AACV;AACA,IAAI,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;AAC5C,IAAI,IAAI,SAAS,KAAK,SAAS,EAAE;AACjC,QAAQ,MAAM,IAAI,KAAK,CAAC,CAAC,2CAA2C,EAAE,MAAM,CAAC,CAAC,CAAC;AAC/E;AACA,IAAI,OAAO,CAAC,SAAS,CAAC;AACtB,CAAC;AACD,OAAO,CAAC,eAAe,GAAG,eAAe;;"}