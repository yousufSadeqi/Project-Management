{"version":3,"file":"index.js","sources":["../../../../../../../src/providers/s3/apis/internal/uploadData/index.ts"],"sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.uploadData = void 0;\nconst utils_1 = require(\"../../../utils\");\nconst assertValidationError_1 = require(\"../../../../../errors/utils/assertValidationError\");\nconst validation_1 = require(\"../../../../../errors/types/validation\");\nconst constants_1 = require(\"../../../utils/constants\");\nconst byteLength_1 = require(\"./byteLength\");\nconst putObjectJob_1 = require(\"./putObjectJob\");\nconst multipart_1 = require(\"./multipart\");\nconst uploadData = (input) => {\n    const { data } = input;\n    const dataByteLength = (0, byteLength_1.byteLength)(data);\n    // Using InvalidUploadSource error code because the input data must NOT be any\n    // of permitted Blob, string, ArrayBuffer(View) if byteLength could not be determined.\n    (0, assertValidationError_1.assertValidationError)(dataByteLength !== undefined, validation_1.StorageValidationErrorCode.InvalidUploadSource);\n    (0, assertValidationError_1.assertValidationError)(dataByteLength <= constants_1.MAX_OBJECT_SIZE, validation_1.StorageValidationErrorCode.ObjectIsTooLarge);\n    if (dataByteLength <= constants_1.DEFAULT_PART_SIZE) {\n        // Single part upload\n        const abortController = new AbortController();\n        return (0, utils_1.createUploadTask)({\n            isMultipartUpload: false,\n            job: (0, putObjectJob_1.putObjectJob)(input, abortController.signal, dataByteLength),\n            onCancel: (message) => {\n                abortController.abort(message);\n            },\n        });\n    }\n    else {\n        // Multipart upload\n        const { multipartUploadJob, onPause, onResume, onCancel } = (0, multipart_1.getMultipartUploadHandlers)(input, dataByteLength);\n        return (0, utils_1.createUploadTask)({\n            isMultipartUpload: true,\n            job: multipartUploadJob,\n            onCancel: (message) => {\n                onCancel(message);\n            },\n            onPause,\n            onResume,\n        });\n    }\n};\nexports.uploadData = uploadData;\n"],"names":[],"mappings":";;AACA;AACA;AACA,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;AAC7D,OAAO,CAAC,UAAU,GAAG,MAAM;AAC3B,MAAM,OAAO,GAAG,OAAO,CAAC,gBAAgB,CAAC;AACzC,MAAM,uBAAuB,GAAG,OAAO,CAAC,mDAAmD,CAAC;AAC5F,MAAM,YAAY,GAAG,OAAO,CAAC,wCAAwC,CAAC;AACtE,MAAM,WAAW,GAAG,OAAO,CAAC,0BAA0B,CAAC;AACvD,MAAM,YAAY,GAAG,OAAO,CAAC,cAAc,CAAC;AAC5C,MAAM,cAAc,GAAG,OAAO,CAAC,gBAAgB,CAAC;AAChD,MAAM,WAAW,GAAG,OAAO,CAAC,aAAa,CAAC;AAC1C,MAAM,UAAU,GAAG,CAAC,KAAK,KAAK;AAC9B,IAAI,MAAM,EAAE,IAAI,EAAE,GAAG,KAAK;AAC1B,IAAI,MAAM,cAAc,GAAG,IAAI,YAAY,CAAC,UAAU,EAAE,IAAI,CAAC;AAC7D;AACA;AACA,IAAI,IAAI,uBAAuB,CAAC,qBAAqB,EAAE,cAAc,KAAK,SAAS,EAAE,YAAY,CAAC,0BAA0B,CAAC,mBAAmB,CAAC;AACjJ,IAAI,IAAI,uBAAuB,CAAC,qBAAqB,EAAE,cAAc,IAAI,WAAW,CAAC,eAAe,EAAE,YAAY,CAAC,0BAA0B,CAAC,gBAAgB,CAAC;AAC/J,IAAI,IAAI,cAAc,IAAI,WAAW,CAAC,iBAAiB,EAAE;AACzD;AACA,QAAQ,MAAM,eAAe,GAAG,IAAI,eAAe,EAAE;AACrD,QAAQ,OAAO,IAAI,OAAO,CAAC,gBAAgB,EAAE;AAC7C,YAAY,iBAAiB,EAAE,KAAK;AACpC,YAAY,GAAG,EAAE,IAAI,cAAc,CAAC,YAAY,EAAE,KAAK,EAAE,eAAe,CAAC,MAAM,EAAE,cAAc,CAAC;AAChG,YAAY,QAAQ,EAAE,CAAC,OAAO,KAAK;AACnC,gBAAgB,eAAe,CAAC,KAAK,CAAC,OAAO,CAAC;AAC9C,aAAa;AACb,SAAS,CAAC;AACV;AACA,SAAS;AACT;AACA,QAAQ,MAAM,EAAE,kBAAkB,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,IAAI,WAAW,CAAC,0BAA0B,EAAE,KAAK,EAAE,cAAc,CAAC;AACtI,QAAQ,OAAO,IAAI,OAAO,CAAC,gBAAgB,EAAE;AAC7C,YAAY,iBAAiB,EAAE,IAAI;AACnC,YAAY,GAAG,EAAE,kBAAkB;AACnC,YAAY,QAAQ,EAAE,CAAC,OAAO,KAAK;AACnC,gBAAgB,QAAQ,CAAC,OAAO,CAAC;AACjC,aAAa;AACb,YAAY,OAAO;AACnB,YAAY,QAAQ;AACpB,SAAS,CAAC;AACV;AACA,CAAC;AACD,OAAO,CAAC,UAAU,GAAG,UAAU;;"}