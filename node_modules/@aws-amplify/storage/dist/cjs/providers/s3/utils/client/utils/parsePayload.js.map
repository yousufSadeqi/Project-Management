{"version":3,"file":"parsePayload.js","sources":["../../../../../../../src/providers/s3/utils/client/utils/parsePayload.ts"],"sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseXmlBody = exports.createXmlErrorParser = void 0;\nconst aws_client_utils_1 = require(\"@aws-amplify/core/internals/aws-client-utils\");\nconst runtime_1 = require(\"../runtime\");\n/**\n * Factory creating a parser that parses the JS Error object from the XML\n * response payload.\n *\n * @param input Input object\n * @param input.noErrorWrapping Whether the error code and message are located\n *   directly in the root XML element, or in a nested `<Error>` element.\n *   See: https://smithy.io/2.0/aws/protocols/aws-restxml-protocol.html#restxml-errors\n *\n *   Default to false.\n *\n * @internal\n */\nconst createXmlErrorParser = ({ noErrorWrapping = false, } = {}) => async (response) => {\n    if (!response || response.statusCode < 300) {\n        return;\n    }\n    const { statusCode } = response;\n    const body = await (0, exports.parseXmlBody)(response);\n    const errorLocation = noErrorWrapping ? body : body.Error;\n    const code = errorLocation?.Code\n        ? errorLocation.Code\n        : statusCode === 404\n            ? 'NotFound'\n            : statusCode.toString();\n    const message = errorLocation?.message ?? errorLocation?.Message ?? code;\n    const error = new Error(message);\n    return Object.assign(error, {\n        name: code,\n        $metadata: (0, aws_client_utils_1.parseMetadata)(response),\n    });\n};\nexports.createXmlErrorParser = createXmlErrorParser;\nconst parseXmlBody = async (response) => {\n    if (!response.body) {\n        // S3 can return 200 without a body indicating failure.\n        throw new Error('S3 aborted request.');\n    }\n    const data = await response.body.text();\n    if (data?.length > 0) {\n        try {\n            return runtime_1.parser.parse(data);\n        }\n        catch (error) {\n            throw new Error(`Failed to parse XML response: ${error}`);\n        }\n    }\n    return {};\n};\nexports.parseXmlBody = parseXmlBody;\n"],"names":[],"mappings":";;AACA;AACA;AACA,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;AAC7D,OAAO,CAAC,YAAY,GAAG,OAAO,CAAC,oBAAoB,GAAG,MAAM;AAC5D,MAAM,kBAAkB,GAAG,OAAO,CAAC,8CAA8C,CAAC;AAClF,MAAM,SAAS,GAAG,OAAO,CAAC,YAAY,CAAC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,oBAAoB,GAAG,CAAC,EAAE,eAAe,GAAG,KAAK,GAAG,GAAG,EAAE,KAAK,OAAO,QAAQ,KAAK;AACxF,IAAI,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,UAAU,GAAG,GAAG,EAAE;AAChD,QAAQ;AACR;AACA,IAAI,MAAM,EAAE,UAAU,EAAE,GAAG,QAAQ;AACnC,IAAI,MAAM,IAAI,GAAG,MAAM,IAAI,OAAO,CAAC,YAAY,EAAE,QAAQ,CAAC;AAC1D,IAAI,MAAM,aAAa,GAAG,eAAe,GAAG,IAAI,GAAG,IAAI,CAAC,KAAK;AAC7D,IAAI,MAAM,IAAI,GAAG,aAAa,EAAE;AAChC,UAAU,aAAa,CAAC;AACxB,UAAU,UAAU,KAAK;AACzB,cAAc;AACd,cAAc,UAAU,CAAC,QAAQ,EAAE;AACnC,IAAI,MAAM,OAAO,GAAG,aAAa,EAAE,OAAO,IAAI,aAAa,EAAE,OAAO,IAAI,IAAI;AAC5E,IAAI,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,OAAO,CAAC;AACpC,IAAI,OAAO,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE;AAChC,QAAQ,IAAI,EAAE,IAAI;AAClB,QAAQ,SAAS,EAAE,IAAI,kBAAkB,CAAC,aAAa,EAAE,QAAQ,CAAC;AAClE,KAAK,CAAC;AACN,CAAC;AACD,OAAO,CAAC,oBAAoB,GAAG,oBAAoB;AACnD,MAAM,YAAY,GAAG,OAAO,QAAQ,KAAK;AACzC,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE;AACxB;AACA,QAAQ,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC;AAC9C;AACA,IAAI,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE;AAC3C,IAAI,IAAI,IAAI,EAAE,MAAM,GAAG,CAAC,EAAE;AAC1B,QAAQ,IAAI;AACZ,YAAY,OAAO,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC;AAC/C;AACA,QAAQ,OAAO,KAAK,EAAE;AACtB,YAAY,MAAM,IAAI,KAAK,CAAC,CAAC,8BAA8B,EAAE,KAAK,CAAC,CAAC,CAAC;AACrE;AACA;AACA,IAAI,OAAO,EAAE;AACb,CAAC;AACD,OAAO,CAAC,YAAY,GAAG,YAAY;;"}