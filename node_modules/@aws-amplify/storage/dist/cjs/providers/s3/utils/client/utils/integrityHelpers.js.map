{"version":3,"file":"integrityHelpers.js","sources":["../../../../../../../src/providers/s3/utils/client/utils/integrityHelpers.ts"],"sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isEqual = exports.isObject = exports.bothNilOrEqual = exports.isNil = void 0;\nconst isNil = (value) => {\n    return value === undefined || value === null;\n};\nexports.isNil = isNil;\nconst bothNilOrEqual = (original, output) => {\n    return ((0, exports.isNil)(original) && (0, exports.isNil)(output)) || original === output;\n};\nexports.bothNilOrEqual = bothNilOrEqual;\n/**\n * This function is used to determine if a value is an object.\n * It excludes arrays and null values.\n *\n * @param value\n * @returns\n */\nconst isObject = (value) => {\n    return value != null && typeof value === 'object' && !Array.isArray(value);\n};\nexports.isObject = isObject;\n/**\n * This function is used to compare two objects and determine if they are equal.\n * It handles nested objects and arrays as well.\n * Array order is not taken into account.\n *\n * @param object\n * @param other\n * @returns\n */\nconst isEqual = (object, other) => {\n    if (Array.isArray(object) && !Array.isArray(other)) {\n        return false;\n    }\n    if (!Array.isArray(object) && Array.isArray(other)) {\n        return false;\n    }\n    if (Array.isArray(object) && Array.isArray(other)) {\n        return (object.length === other.length &&\n            object.every((val, ix) => (0, exports.isEqual)(val, other[ix])));\n    }\n    if (!(0, exports.isObject)(object) || !(0, exports.isObject)(other)) {\n        return object === other;\n    }\n    const objectKeys = Object.keys(object);\n    const otherKeys = Object.keys(other);\n    if (objectKeys.length !== otherKeys.length) {\n        return false;\n    }\n    return objectKeys.every(key => {\n        return (otherKeys.includes(key) &&\n            (0, exports.isEqual)(object[key], other[key]));\n    });\n};\nexports.isEqual = isEqual;\n"],"names":[],"mappings":";;AACA;AACA;AACA,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;AAC7D,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC,cAAc,GAAG,OAAO,CAAC,KAAK,GAAG,MAAM;AACpF,MAAM,KAAK,GAAG,CAAC,KAAK,KAAK;AACzB,IAAI,OAAO,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI;AAChD,CAAC;AACD,OAAO,CAAC,KAAK,GAAG,KAAK;AACrB,MAAM,cAAc,GAAG,CAAC,QAAQ,EAAE,MAAM,KAAK;AAC7C,IAAI,OAAO,CAAC,IAAI,OAAO,CAAC,KAAK,EAAE,QAAQ,CAAC,IAAI,IAAI,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,KAAK,QAAQ,KAAK,MAAM;AAC9F,CAAC;AACD,OAAO,CAAC,cAAc,GAAG,cAAc;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,QAAQ,GAAG,CAAC,KAAK,KAAK;AAC5B,IAAI,OAAO,KAAK,IAAI,IAAI,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC;AAC9E,CAAC;AACD,OAAO,CAAC,QAAQ,GAAG,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,OAAO,GAAG,CAAC,MAAM,EAAE,KAAK,KAAK;AACnC,IAAI,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;AACxD,QAAQ,OAAO,KAAK;AACpB;AACA,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;AACxD,QAAQ,OAAO,KAAK;AACpB;AACA,IAAI,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;AACvD,QAAQ,QAAQ,MAAM,CAAC,MAAM,KAAK,KAAK,CAAC,MAAM;AAC9C,YAAY,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,KAAK,IAAI,OAAO,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;AAC3E;AACA,IAAI,IAAI,CAAC,IAAI,OAAO,CAAC,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,OAAO,CAAC,QAAQ,EAAE,KAAK,CAAC,EAAE;AACzE,QAAQ,OAAO,MAAM,KAAK,KAAK;AAC/B;AACA,IAAI,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;AAC1C,IAAI,MAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;AACxC,IAAI,IAAI,UAAU,CAAC,MAAM,KAAK,SAAS,CAAC,MAAM,EAAE;AAChD,QAAQ,OAAO,KAAK;AACpB;AACA,IAAI,OAAO,UAAU,CAAC,KAAK,CAAC,GAAG,IAAI;AACnC,QAAQ,QAAQ,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC;AACvC,YAAY,IAAI,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;AACzD,KAAK,CAAC;AACN,CAAC;AACD,OAAO,CAAC,OAAO,GAAG,OAAO;;"}