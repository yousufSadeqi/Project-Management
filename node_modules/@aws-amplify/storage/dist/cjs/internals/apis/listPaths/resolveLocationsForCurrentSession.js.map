{"version":3,"file":"resolveLocationsForCurrentSession.js","sources":["../../../../../src/internals/apis/listPaths/resolveLocationsForCurrentSession.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.resolveLocationsForCurrentSession = void 0;\nconst constants_1 = require(\"../../utils/constants\");\nconst resolvePermissions = (accessRule, isAuthenticated, groups) => {\n    if (!isAuthenticated) {\n        return {\n            permission: accessRule.guest,\n        };\n    }\n    if (groups) {\n        const selectedKey = Object.keys(accessRule).find(access => access.includes(groups));\n        return {\n            permission: selectedKey ? accessRule[selectedKey] : undefined,\n        };\n    }\n    return {\n        permission: accessRule.authenticated,\n    };\n};\nconst resolveLocationsForCurrentSession = ({ buckets, isAuthenticated, identityId, userGroup, }) => {\n    const locations = [];\n    for (const [, bucketInfo] of Object.entries(buckets)) {\n        const { bucketName, paths } = bucketInfo;\n        if (!paths) {\n            continue;\n        }\n        for (const [path, accessRules] of Object.entries(paths)) {\n            const shouldIncludeEntityIdPath = !userGroup &&\n                path.includes(constants_1.ENTITY_IDENTITY_URL) &&\n                isAuthenticated &&\n                identityId;\n            if (shouldIncludeEntityIdPath) {\n                locations.push({\n                    type: 'PREFIX',\n                    permission: accessRules.entityidentity,\n                    bucket: bucketName,\n                    prefix: path.replace(constants_1.ENTITY_IDENTITY_URL, identityId),\n                });\n            }\n            const location = {\n                type: 'PREFIX',\n                ...resolvePermissions(accessRules, isAuthenticated, userGroup),\n                bucket: bucketName,\n                prefix: path,\n            };\n            if (location.permission)\n                locations.push(location);\n        }\n    }\n    return locations;\n};\nexports.resolveLocationsForCurrentSession = resolveLocationsForCurrentSession;\n"],"names":[],"mappings":";;AACA,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;AAC7D,OAAO,CAAC,iCAAiC,GAAG,MAAM;AAClD,MAAM,WAAW,GAAG,OAAO,CAAC,uBAAuB,CAAC;AACpD,MAAM,kBAAkB,GAAG,CAAC,UAAU,EAAE,eAAe,EAAE,MAAM,KAAK;AACpE,IAAI,IAAI,CAAC,eAAe,EAAE;AAC1B,QAAQ,OAAO;AACf,YAAY,UAAU,EAAE,UAAU,CAAC,KAAK;AACxC,SAAS;AACT;AACA,IAAI,IAAI,MAAM,EAAE;AAChB,QAAQ,MAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;AAC3F,QAAQ,OAAO;AACf,YAAY,UAAU,EAAE,WAAW,GAAG,UAAU,CAAC,WAAW,CAAC,GAAG,SAAS;AACzE,SAAS;AACT;AACA,IAAI,OAAO;AACX,QAAQ,UAAU,EAAE,UAAU,CAAC,aAAa;AAC5C,KAAK;AACL,CAAC;AACD,MAAM,iCAAiC,GAAG,CAAC,EAAE,OAAO,EAAE,eAAe,EAAE,UAAU,EAAE,SAAS,GAAG,KAAK;AACpG,IAAI,MAAM,SAAS,GAAG,EAAE;AACxB,IAAI,KAAK,MAAM,GAAG,UAAU,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;AAC1D,QAAQ,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,GAAG,UAAU;AAChD,QAAQ,IAAI,CAAC,KAAK,EAAE;AACpB,YAAY;AACZ;AACA,QAAQ,KAAK,MAAM,CAAC,IAAI,EAAE,WAAW,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;AACjE,YAAY,MAAM,yBAAyB,GAAG,CAAC,SAAS;AACxD,gBAAgB,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,mBAAmB,CAAC;AAC9D,gBAAgB,eAAe;AAC/B,gBAAgB,UAAU;AAC1B,YAAY,IAAI,yBAAyB,EAAE;AAC3C,gBAAgB,SAAS,CAAC,IAAI,CAAC;AAC/B,oBAAoB,IAAI,EAAE,QAAQ;AAClC,oBAAoB,UAAU,EAAE,WAAW,CAAC,cAAc;AAC1D,oBAAoB,MAAM,EAAE,UAAU;AACtC,oBAAoB,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,mBAAmB,EAAE,UAAU,CAAC;AACrF,iBAAiB,CAAC;AAClB;AACA,YAAY,MAAM,QAAQ,GAAG;AAC7B,gBAAgB,IAAI,EAAE,QAAQ;AAC9B,gBAAgB,GAAG,kBAAkB,CAAC,WAAW,EAAE,eAAe,EAAE,SAAS,CAAC;AAC9E,gBAAgB,MAAM,EAAE,UAAU;AAClC,gBAAgB,MAAM,EAAE,IAAI;AAC5B,aAAa;AACb,YAAY,IAAI,QAAQ,CAAC,UAAU;AACnC,gBAAgB,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC;AACxC;AACA;AACA,IAAI,OAAO,SAAS;AACpB,CAAC;AACD,OAAO,CAAC,iCAAiC,GAAG,iCAAiC;;"}